from routing_fattree_topo import Topology

global networkSize

networkSize = None
def set_size(size):
    global networkSize
    networkSize = size

def nodes_to_remove(version, graph):
    if version == 0:
        return []
    return [ host for host in graph.hosts() if host % 10 == (version + 1) ]

def switches_to_remove(version, graph):
    if version == 0:
        return []
    return [ core for core in graph.coreSwitches if core % 5 == (version + 1) ]

def _topology1(version, topology=Topology):
    global networkSize
    graph = topology(networkSize).nx_graph()
    graph.remove_nodes_from(nodes_to_remove(version, graph))
    graph.remove_nodes_from(switches_to_remove(0, graph))
    return graph

def _topology2(version, topology=Topology):
    global networkSize    
    graph = topology(networkSize).nx_graph()
    graph.remove_nodes_from(nodes_to_remove(0, graph))
    graph.remove_nodes_from(switches_to_remove(version, graph))
    return graph

def _topology3(version, topology=Topology):
    global networkSize        
    graph = topology(networkSize).nx_graph()
    graph.remove_nodes_from(nodes_to_remove(version, graph))
    graph.remove_nodes_from(switches_to_remove(version, graph))
    return graph

topologies = [ _topology1,
               _topology2,
               _topology3 ]
